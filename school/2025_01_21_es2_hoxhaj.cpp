#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Course {
    private:
    string title; 
    string description; 
    vector <int> enrolled;
    public: 
    Course(string title , string description, int enrolled) : title(title), description(description), enrolled(enrolled){}
    ostream operator<<(ostream& os, Course& u){
        os << "Class title: " << u.title << endl;
        os << "Class Description: " << u.description << endl;
        for (int i = 0; i <enrolled.size(); i){
            os << "Enrolled student: " << enrolled[i] << endl;
            os << endl;
        }
        return os;
    }
};

class User{
    private:
    string name; 
    string surname; 
    string emailAddress; 
    static int count;
    public: 
    Users(string name, string surname, string emailAddress) : name(name), surname(surname), emailAddress(emailAddress){count++;}
    int revenue(){
        return 100*count;
    }
    void emailAddressCheck(string emailAddress){
        cout << "Email address: " << emailAddress << endl;
        if(emailAddress.find("@")!=string::npos && emailAddress.find(".")!=string::npos){
            cout << "Email address is valid" << endl;
        }else{
            cout << "Email address is invalid" << endl;
        }
    }
};
int User::count=0;

class Student : public User{
    private: 
    int grade;
    public: 
    Student(int grade, string n, string sn, string ea): grade(grade), name(n), surname(sn), emailAddress(ea){}

};

class Instructor : public User{
    private: 
    string subject;
    public:
    Instructor(string subject, string n, string sn, string ea): subject(subject) , name(n), surname(sn) , emailAddress(ea){}
}

int main(){
    Course course("Programming", "Introduction to programming", 10);
    cout << course;
    User user("John", "Doe", "johndoe@example.com");
    user.emailAddressCheck("johndoe@example.com");
    cout << "Revenue generated by all users: " << user.revenue() << endl;
    Student student(90, "Alice", "Smith", "alice@example.com");
    Instructor instructor("C++", "Bob", "Johnson", "bobjohnson@example");
    return 0;
}